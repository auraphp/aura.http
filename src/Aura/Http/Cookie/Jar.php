<?php
/**
 * 
 * This file is part of the Aura project for PHP.
 * 
 * @package Aura.Http
 * 
 * @license http://opensource.org/licenses/bsd-license.php BSD
 * 
 */
namespace Aura\Http\Cookie;

use Aura\Http\Cookie;
use Aura\Http\Cookie\Factory as CookieFactory;
use Aura\Http\Exception;
use Aura\Http\Message\Response\Stack as ResponseStack;

/**
 * 
 * Create and read a Netscape HTTP cookie file
 * 
 * @see http://curl.haxx.se/rfc/cookie_spec.html
 * 
 * @package Aura.Http
 * 
 */
class Jar
{
    /**
     * 
     * The list of cookies.
     * 
     * @var array
     * 
     */
    protected $list = [];

    /**
     * 
     * A factory to create cookies.
     * 
     * @var CookieFactory
     * 
     */
    protected $factory;

    /**
     * 
     * A stream resource for cookie storage.
     * 
     * @var resource 
     * 
     */
    protected $storage;

    /**
     * 
     * Mark as true if we opened the stream ourselves.
     * 
     * @var bool 
     * 
     */
    protected $close = false;

    /**
     *
     * Constructor; loads cookies from storage.
     * 
     * @param CookieFactory $factory A factory to create cookies.
     * 
     * @param string|resource $storage A string file name, or a stream
     * resource, for cookie storage.
     * 
     */
    public function __construct(
        CookieFactory $factory,
        $storage
    ) {
        $this->factory = $factory;
        if (is_resource($storage)) {
            $this->storage = $storage;
            $this->close = false;
        } else {
            $this->storage = fopen($storage, 'w+');
            $this->close = true;
        }

        // load from the storage stream
        $this->load();
    }

    /**
     * 
     * Destructor, close resource
     * 
     * @return void
     * 
     */
    public function __destruct()
    {
        if ($this->close) {
            fclose($this->storage);
        }
    }

    /**
     *
     * A string of all all cookies
     * 
     * @return string 
     */
    public function __toString()
    {
        $text = [
            '# Netscape HTTP Cookie File',
            '# http://curl.haxx.se/rfc/cookie_spec.html',
            '# This file was generated by Aura. Edit at your own risk!'.
            '',
        ];

        foreach ($this->list as $cookie) {
            if (! $cookie->isExpired()) {
                $text[] = $cookie->toJarString();
            }
        }

        return implode(PHP_EOL, $text);
    }

    /**
     * 
     * Open storage and add cookies from it.
     * 
     * @return void
     * 
     */
    protected function load()
    {
        rewind($this->storage);
        $lines = null;
        while (! feof($this->storage)) {
            $lines .= fread($this->storage, 8192);
        }
        $lines = explode(PHP_EOL, $lines);

        foreach ($lines as $line) {

            // skip blank lines
            $line = trim($line);
            if (! $line) {
                continue;
            }

            // skip comments
            if ('#' == $line[0] && '#HttpOnly_' != substr($line, 0, 10)) {
                continue;
            }

            try {
                // create the cookie
                $cookie = $this->factory->newInstance();
                $cookie->setFromJar($line);

                // retain
                $this->add($cookie);

            } catch (Exception\MalformedCookie $e) {
                // ignore
            }

        }
    }

    /**
     * 
     * Remove cookies which are expired.
     * 
     * @return void
     * 
     */
    public function expireSessionCookies()
    {
        foreach ($this->list as $key => $cookie) {
            if ($cookie->isExpired(true)) {
                unset($this->list[$key]);
            }
        }
    }

    /**
     *
     * Add a cookie to the jar. The cookie will not be written 
     * until `save()` is called.
     * 
     * @param Cookie $cookie The cookie to be added.
     *
     */
    public function add(Cookie $cookie)
    {
        $key = $cookie->getName() . $cookie->getDomain() . $cookie->getPath();
        $this->list[$key] = $cookie;
    }

    /**
     *
     * Add cookies from a stack of response messages.
     * 
     * @todo This needs to make sure cookies are attached to the right host
     * and path when there are Location headers (redirects) in the stack.
     * 
     * @param ResponseStack $stack 
     */
    public function addFromResponseStack(ResponseStack $stack)
    {
        foreach ($stack as $response) {
            $cookies = $response->getCookies()->getAll();
            foreach ($cookies as $cookie) {
                $this->add($cookie);
            }
        }
    }

    /**
     *
     * Save the cookies to storage.
     *
     * @return void
     *
     */
    public function save()
    {
        // rewind to beginning
        rewind($this->storage);

        // overwrite the stream
        $text = $this->__toString();
        fwrite($this->storage, $text);

        // truncate remainder to remove old data
        ftruncate($this->storage, strlen($text));
    }

    /**
     *
     * List all stored cookies with an optional matching URL. The matching URL
     * must contain a scheme and host.
     *
     * @param string $matching_url
     *
     * @return array
     * 
     * @throws Aura\Http\Exception If the matching URL does not contain a
     * scheme or domain.
     *
     */
    public function getAll($matching_url = null)
    {
        if (! $matching_url) {
            return $this->list;
        }

        $url = parse_url($matching_url);

        if (! isset($url['scheme'], $url['host'])) {
            $msg = 'The `$matching_url` argument must contain a ' .
                   'scheme and a host name.';
            throw new Exception($msg);
        }

        $path = empty($url['path']) ? '/' : $url['path'];
        $return = [];

        foreach ($this->list as $key => $cookie) {
            if ($cookie->isMatch($url['scheme'], $url['host'], $path)) {
                $return[$key] = $cookie;
            }
        }

        return $return;
    }
}
 